  0:	proc  - (:root:) creates proc  0 (producer)
  0:	proc  - (:root:) creates proc  1 (consumer)
  1:	proc  1 (consumer:1) exercise1.pml:19 (state 1)	[i = 0]
		consumer(1):i = 0

  2:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

  3:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

  4:	proc  0 (producer:1) exercise1.pml:10 (state 1)	[i = 0]
		producer(0):i = 0

  5:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

  6:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

  7:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
  7:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
  7:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!0]
  7:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?0]
		consumer(1):a = 0

  8:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 1

0
  9:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 10:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 1

 11:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 12:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 13:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 14:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 15:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 15:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 15:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!1]
 15:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?1]
		consumer(1):a = 1

1
 16:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 17:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 2

 18:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 2

 19:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 20:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 21:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 22:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 23:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 23:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 23:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!2]
 23:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?2]
		consumer(1):a = 2

2
 24:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 25:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 3

 26:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 3

 27:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 28:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 29:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 30:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 31:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 31:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 31:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!3]
 31:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?3]
		consumer(1):a = 3

3
 32:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 33:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 4

 34:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 35:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 4

 36:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 37:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 38:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 39:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 39:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 39:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!4]
 39:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?4]
		consumer(1):a = 4

4
 40:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 41:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 5

 42:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 5

 43:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 44:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 45:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 46:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 47:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 47:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 47:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!5]
 47:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?5]
		consumer(1):a = 5

5
 48:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 49:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 6

 50:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 51:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 6

 52:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 53:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 54:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 55:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 55:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 55:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!6]
 55:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?6]
		consumer(1):a = 6

 56:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 7

 57:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

6
 58:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 59:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 7

 60:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 61:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 62:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 63:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 63:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 63:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!7]
 63:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?7]
		consumer(1):a = 7

 64:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 8

7
 65:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 66:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 67:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 8

 68:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

 69:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 70:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 71:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 71:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 71:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!8]
 71:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?8]
		consumer(1):a = 8

 72:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 9

 73:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

 74:	proc  0 (producer:1) exercise1.pml:10 (state 2)	[((i<=9))]

8
 75:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 76:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 9

 77:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 78:	proc  1 (consumer:1) exercise1.pml:19 (state 2)	[((i<=9))]

 79:	proc  0 (producer:1) exercise1.pml:12 (state 3)	[myChan!i]
 79:	proc  1 (consumer:1) exercise1.pml:21 (state 3)	[myChan?a]
 79:	proc  0 (producer:1) exercise1.pml:12 (state -)	[values: 1!9]
 79:	proc  1 (consumer:1) exercise1.pml:21 (state -)	[values: 1?9]
		consumer(1):a = 9

 80:	proc  0 (producer:1) exercise1.pml:10 (state 4)	[i = (i+1)]
		producer(0):i = 10

 81:	proc  0 (producer:1) exercise1.pml:14 (state 8)	[.(goto)]

9
 82:	proc  1 (consumer:1) exercise1.pml:22 (state 4)	[printf('%d\\n',a)]

 83:	proc  1 (consumer:1) exercise1.pml:19 (state 5)	[i = (i+1)]
		consumer(1):i = 10

 84:	proc  1 (consumer:1) exercise1.pml:24 (state 9)	[.(goto)]

 85:	proc  0 (producer:1) exercise1.pml:13 (state 5)	[else]

 86:	proc  1 (consumer:1) exercise1.pml:23 (state 6)	[else]

 87:	proc  0 (producer:1) exercise1.pml:13 (state 6)	[goto :b0]

 88:	proc  1 (consumer:1) exercise1.pml:23 (state 7)	[goto :b1]

 88:	proc  1 (consumer:1) terminates
 88:	proc  0 (producer:1) terminates
2 processes created
