mtype = {login, logout} 

inline selectEvent(event) {
  if
   :: event = login
   :: event = logout
  fi   
}

// counts failed authentication tries
byte fail = 0;
// current state
byte currentState = 0;

active proctype Authentication() {
// received event
mtype ev;

do
 :: currentState == 0 ->
           printf("Init");
           selectEvent(ev);
           if
            :: fail < 3  && ev == login  ->  fail = 0; currentState = 1;  // (*)
            :: fail < 3  && ev == login  ->  fail = fail + 1; currentState = 0 // as we stay in the same state 
                                                                               // the last assignment is not necessary
                                                                               // only to keep the code a bit more 
                                                                               // understandable     
            :: else -> skip  // if an illegal event was received, ignore the event. Also possible: make error state explicit
           fi
 :: currentState == 1 -> assert (fail == 0); // Aufgabe 2.2a) (assertion could also be placed at position (*))
           printf("Authenticated"); 
           selectEvent(ev); 
           if
            :: ev == logout -> currentState = 0
            :: else -> skip // if an illegal event was received ignore the event. Also possible: make error state explicit
           fi 
 :: currentState == 2 -> 
            assert (fail == 3); // Aufgabe 2.2b)
            printf("Locked"); 
            selectEvent(ev)        
od
}

active proctype invariant() {
    assert ((currentState == 2 && fail >= 3) || (currentState != 2 && fail < 3))
}
